{"version":3,"sources":["../src/ConfigCache.js"],"names":["PERSISTENT_KEY","ES_MODULE_KEY","ENVIRONMENT","ConfigCache","environment","set","key","value","persistent","has","require","cache","default","get","getOrDefault"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAIA;;;;AAIA,IAAMA,iBAAiB,sBAAvB;;AAEA;;;;AAIA,IAAMC,gBAAgB,YAAtB;;AAEA;;;;AAIA,IAAMC,cAAc,uBAApB;;AAEA;;;;;;IAKMC,W;;;AACF;;;;AAIA,yBAAYC,WAAZ,EAAyB;AAAA;;AAAA;;AAGrBF,oBAAYG,GAAZ,QAAsBD,WAAtB;AAHqB;AAIxB;;AAED;;;;;;;;;;AA8BA;;;4BAGIE,G,EAAK;AACL,gBAAIC,cAAJ;;AAEA,gBAAI,KAAKC,UAAT,EAAqB;AACjB,oBAAI,CAAC,KAAKC,GAAL,CAASH,GAAT,CAAL,EAAoB;AAChBC,4BAAQG,QAAQJ,GAAR,CAAR;;AAEA,yBAAKD,GAAL,CAASC,GAAT,EAAcC,KAAd;AACH,iBAJD,MAIO;AACHA,gKAAkBD,GAAlB;AACH;AACJ,aARD,MAQO;AACH,uBAAOI,QAAQC,KAAR,CAAcL,GAAd,CAAP;;AAEAC,wBAAQG,QAAQJ,GAAR,CAAR;AACH;;AAED,mBAAO,iBAAIC,KAAJ,EAAWN,aAAX,EAA0B,KAA1B,IAAmCM,MAAMK,OAAzC,GAAmDL,KAA1D;AACH;;;4BA/CiB;AACd,mBAAOL,YAAYW,GAAZ,CAAgB,IAAhB,CAAP;AACH;;AAED;;;;;;4BAGiB;AACb,mBAAO,KAAKT,WAAL,CAAiBU,YAAjB,CAA8Bd,cAA9B,EAA8C,IAA9C,MAAwD,IAA/D;AACH;;AAED;;;;;;;;;;;;0BAWeO,K,EAAO;AAClB,iBAAKH,WAAL,CAAiBC,GAAjB,CAAqBL,cAArB,EAAqCO,KAArC;AACH;;;;;kBA0BUJ,W","file":"ConfigCache.js","sourcesContent":["import {\n    get\n} from 'lodash';\n\n/**\n * @private\n * @type {String}\n */\nconst PERSISTENT_KEY = 'WEBPACK_CONFIG_CACHE';\n\n/**\n * @private\n * @type {String}\n */\nconst ES_MODULE_KEY = '__esModule';\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst ENVIRONMENT = new WeakMap();\n\n/**\n * Please set `WEBPACK_CONFIG_CACHE` environment variable to `false` to make it non persistent or just use {@link ConfigCache#persistent}\n * @class\n * @extends {Map}\n */\nclass ConfigCache extends Map {\n    /**\n     * @constructor\n     * @param {ConfigEnvironment} environment\n     */\n    constructor(environment) {\n        super();\n\n        ENVIRONMENT.set(this, environment);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigEnvironment}\n     */\n    get environment() {\n        return ENVIRONMENT.get(this);\n    }\n\n    /**\n     * @type {Boolean}\n     */\n    get persistent() {\n        return this.environment.getOrDefault(PERSISTENT_KEY, true) === true;\n    }\n\n    /**\n     * @example\n     * import {\n     *   cache\n     * } from 'webpack-config';\n     *\n     * cache.persistent = false;\n     * @example\n     * WEBPACK_CONFIG_CACHE=false ...\n     * @param {Boolean} value\n     */\n    set persistent(value) {\n        this.environment.set(PERSISTENT_KEY, value);\n    }\n\n    /**\n     * @override\n     */\n    get(key) {\n        let value;\n\n        if (this.persistent) {\n            if (!this.has(key)) {\n                value = require(key);\n\n                this.set(key, value);\n            } else {\n                value = super.get(key);\n            }\n        } else {\n            delete require.cache[key];\n\n            value = require(key);\n        }\n\n        return get(value, ES_MODULE_KEY, false) ? value.default : value;\n    }\n}\n\nexport default ConfigCache;\n"]}