{"version":3,"sources":["../src/ConfigPathResolver.js"],"names":["PATH_RESOLVERS","STRING_RESOLVER","ConfigPathResolver","stringResolver","pathResolvers","set","value","resolve","resolver","resolvedValue","throwsError","Error","get"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;AAIA;;;;;;AAEA;;;;AAIA,IAAMA,iBAAiB,uBAAvB;;AAEA;;;;AAIA,IAAMC,kBAAkB,uBAAxB;;AAEA;;;;IAGMC,kB;AACF;;;;;AAKA,gCAAYC,cAAZ,EAA+D;AAAA,YAAnCC,aAAmC;AAAA;;AAC3DH,wBAAgBI,GAAhB,CAAoB,IAApB,EAA0BF,cAA1B;AACAH,uBAAeK,GAAf,CAAmB,IAAnB,EAAyBD,aAAzB;AACH;;AAED;;;;;;;;;;AAgBA;;;;gCAIQE,K,EAAO;AACXA,oBAAQ,KAAKH,cAAL,CAAoBI,OAApB,CAA4BD,KAA5B,CAAR;;AADW;AAAA;AAAA;;AAAA;AAGX,gEAAuB,KAAKF,aAA5B,4GAA2C;AAAA,wBAAhCI,QAAgC;;AACvC,wBAAMC,gBAAgBD,SAASF,KAAT,CAAtB;AAAA,wBACII,cAAc,qBAAQJ,KAAR,KAAkBA,iBAAiBK,KADrD;;AAGA,wBAAI,sBAASF,aAAT,KAA2B,CAACC,WAAhC,EAA6C;AACzCJ,gCAAQG,aAAR;AACA;AACH;AACJ;AAXU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaX,mBAAOH,KAAP;AACH;;;4BA9BoB;AACjB,mBAAOL,gBAAgBW,GAAhB,CAAoB,IAApB,CAAP;AACH;;AAED;;;;;;;4BAIoB;AAChB,mBAAOZ,eAAeY,GAAf,CAAmB,IAAnB,CAAP;AACH;;;;;kBAuBUV,kB","file":"ConfigPathResolver.js","sourcesContent":["import {\n    isString,\n    isError\n} from 'lodash';\nimport DEFAULT_RESOLVERS from './ConfigPathDefaultResolvers';\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst PATH_RESOLVERS = new WeakMap();\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst STRING_RESOLVER = new WeakMap();\n\n/**\n * @class\n */\nclass ConfigPathResolver {\n    /**\n     * @constructor\n     * @param {ConfigStringResolver} stringResolver\n     * @param {Function[]} [pathResolvers]\n     */\n    constructor(stringResolver, pathResolvers = DEFAULT_RESOLVERS) {\n        STRING_RESOLVER.set(this, stringResolver);\n        PATH_RESOLVERS.set(this, pathResolvers);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigStringResolver}\n     */\n    get stringResolver() {\n        return STRING_RESOLVER.get(this);\n    }\n\n    /**\n     * @readonly\n     * @type {Function[]}\n     */\n    get pathResolvers() {\n        return PATH_RESOLVERS.get(this);\n    }\n\n    /**\n     * @param {String} value\n     * @returns {String}\n     */\n    resolve(value) {\n        value = this.stringResolver.resolve(value);\n\n        for (const resolver of this.pathResolvers) {\n            const resolvedValue = resolver(value),\n                throwsError = isError(value) || value instanceof Error;\n\n            if (isString(resolvedValue) && !throwsError) {\n                value = resolvedValue;\n                break;\n            }\n        }\n\n        return value;\n    }\n}\n\nexport default ConfigPathResolver;\n"]}