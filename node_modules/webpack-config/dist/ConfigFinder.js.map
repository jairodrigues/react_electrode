{"version":3,"sources":["../src/ConfigFinder.js"],"names":["PATH_RESOLVER","GLOB_OPTIONS","cache","dot","silent","ConfigFinder","pathResolver","set","pattern","visited","resolve","push","configs","findConfigs","length","cwd","paths","split","join","findClosestConfigs","map","filename","get"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;AAKA;;AAKA;;AAIA;;;;;;AAEA;;;;AAIA,IAAMA,gBAAgB,uBAAtB;;AAEA;;;;AAIA,IAAMC,eAAe;AACjBC,WAAO,IADU;AAEjBC,SAAK,KAFY;AAGjBC,YAAQ;AAHS,CAArB;;AAMA;;;;IAGMC,Y;AACF;;;;AAIA,0BAAYC,YAAZ,EAA0B;AAAA;;AACtBN,sBAAcO,GAAd,CAAkB,IAAlB,EAAwBD,YAAxB;AACH;;AAED;;;;;;;;;;AAQA;;;;;2CAKmBE,O,EAAuB;AAAA,gBAAdC,OAAc,uEAAJ,EAAI;;AACtCD,sBAAU,KAAKF,YAAL,CAAkBI,OAAlB,CAA0BF,OAA1B,CAAV;;AAEA,gBAAI,sBAASC,OAAT,EAAkBD,OAAlB,CAAJ,EAAgC;AAC5B,uBAAO,EAAP;AACH;;AAEDC,oBAAQE,IAAR,CAAaH,OAAb;;AAEA,gBAAMI,UAAU,KAAKC,WAAL,CAAiBL,OAAjB,CAAhB;;AAEA,gBAAII,QAAQE,MAAR,GAAiB,CAArB,EAAwB;AACpB,uBAAOF,OAAP;AACH;;AAED,gBAAMG,MAAM,yBAAU,eAASP,OAAT,CAAV,CAAZ;AAAA,gBACIQ,QAAQ,qBAAQD,GAAR,aAAkBE,KAAlB,WADZ;;AAGAT,sBAAU,gBAAK,uBAAUQ,KAAV,EAAiBE,IAAjB,WAAL,EAAiC,oBAASV,OAAT,CAAjC,CAAV;;AAEA,mBAAO,KAAKW,kBAAL,CAAwBX,OAAxB,EAAiCC,OAAjC,CAAP;AACH;;AAED;;;;;;;oCAIYD,O,EAAS;AAAA;;AACjBA,sBAAU,KAAKF,YAAL,CAAkBI,OAAlB,CAA0BF,OAA1B,CAAV;;AAEA,mBAAO,gBAAKA,OAAL,EAAcP,YAAd,EAA4BmB,GAA5B,CAAgC;AAAA,uBAAY,MAAKd,YAAL,CAAkBI,OAAlB,CAA0BW,QAA1B,CAAZ;AAAA,aAAhC,CAAP;AACH;;;4BAxCkB;AACf,mBAAOrB,cAAcsB,GAAd,CAAkB,IAAlB,CAAP;AACH;;;;;kBAyCUjB,Y","file":"ConfigFinder.js","sourcesContent":["import {\n    sep,\n    join,\n    basename\n} from 'path';\nimport {\n    trimEnd,\n    dropRight,\n    includes\n} from 'lodash';\nimport {\n    sync,\n    Glob\n} from 'glob';\nimport glob2base from 'glob2base';\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst PATH_RESOLVER = new WeakMap();\n\n/**\n * @private\n * @type {Object}\n */\nconst GLOB_OPTIONS = {\n    cache: true,\n    dot: false,\n    silent: true\n};\n\n/**\n * @class\n */\nclass ConfigFinder {\n    /**\n     * @constructor\n     * @param {ConfigPathResolver} pathResolver\n     */\n    constructor(pathResolver) {\n        PATH_RESOLVER.set(this, pathResolver);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigPathResolver}\n     */\n    get pathResolver() {\n        return PATH_RESOLVER.get(this);\n    }\n\n    /**\n     * @param {String} pattern\n     * @param {String[]} [visited]\n     * @returns {String[]}\n     */\n    findClosestConfigs(pattern, visited = []) {\n        pattern = this.pathResolver.resolve(pattern);\n\n        if (includes(visited, pattern)) {\n            return [];\n        }\n\n        visited.push(pattern);\n\n        const configs = this.findConfigs(pattern);\n\n        if (configs.length > 0) {\n            return configs;\n        }\n\n        const cwd = glob2base(new Glob(pattern)),\n            paths = trimEnd(cwd, sep).split(sep);\n\n        pattern = join(dropRight(paths).join(sep), basename(pattern));\n\n        return this.findClosestConfigs(pattern, visited);\n    }\n\n    /**\n     * @param {String} pattern\n     * @returns {String[]}\n     */\n    findConfigs(pattern) {\n        pattern = this.pathResolver.resolve(pattern);\n\n        return sync(pattern, GLOB_OPTIONS).map(filename => this.pathResolver.resolve(filename));\n    }\n}\n\nexport default ConfigFinder;\n"]}