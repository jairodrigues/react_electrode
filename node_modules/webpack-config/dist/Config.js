'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _entries = require('babel-runtime/core-js/object/entries');

var _entries2 = _interopRequireDefault(_entries);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _weakMap = require('babel-runtime/core-js/weak-map');

var _weakMap2 = _interopRequireDefault(_weakMap);

var _lodash = require('lodash');

var _ConfigDependency = require('./ConfigDependency');

var _ConfigDependency2 = _interopRequireDefault(_ConfigDependency);

var _ConfigCommandInvoker = require('./ConfigCommandInvoker');

var _ConfigCommandInvoker2 = _interopRequireDefault(_ConfigCommandInvoker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @private
 * @type {WeakMap}
 */
var DEPENDENCY_TREE = new _weakMap2.default();

/**
 * @private
 * @type {WeakMap}
 */
var FACTORY = new _weakMap2.default();

/**
 * @private
 * @type {WeakMap}
 */
var DEFAULTS_COMMAND = new _weakMap2.default();

/**
 * @private
 * @type {WeakMap}
 */
var MERGE_COMMAND = new _weakMap2.default();

/**
 * @private
 * @type {WeakMap}
 */
var EXTEND_COMMAND = new _weakMap2.default();

/**
 * @class
 */

var Config = function () {
  /**
   * @constructor
   * @param {ConfigFactory} factory
   * @param {ConfigDefaultsCommand} defaultsCommand
   * @param {ConfigMergeCommand} mergeCommand
   * @param {ConfigExtendCommand} extendCommand
   */
  function Config(factory, defaultsCommand, mergeCommand, extendCommand) {
    (0, _classCallCheck3.default)(this, Config);

    FACTORY.set(this, factory);
    DEFAULTS_COMMAND.set(this, defaultsCommand);
    MERGE_COMMAND.set(this, mergeCommand);
    EXTEND_COMMAND.set(this, extendCommand);
  }

  /**
   * @readonly
   * @type {ConfigFactory}
   */


  (0, _createClass3.default)(Config, [{
    key: 'defaults',


    /**
     * import Config from 'webpack-config';
     *
     * export default new Config().defaults({
     *    debug: true
     * }, {
     *    profile: false
     * });
     * @example
     * import Config from 'webpack-config';
     *
     * export default new Config().defaults(() => {
     *     return {
     *         debug: true
     *     };
     * });
     * @description Adds `values` if they are missing
     * @param {...ConfigOptions} values
     * @returns {Config}
     */
    value: function defaults() {
      var _ref;

      for (var _len = arguments.length, values = Array(_len), _key = 0; _key < _len; _key++) {
        values[_key] = arguments[_key];
      }

      return (_ref = new _ConfigCommandInvoker2.default(this.defaultsCommand)).invoke.apply(_ref, [this].concat(values));
    }

    /**
     * @example
     * import Config from 'webpack-config';
     *
     * export default new Config().merge({
     *    debug: true
     * }, {
     *    profile: false
     * });
     * @example
     * import Config from 'webpack-config';
     *
     * export default new Config().merge(() => {
     *     return {
     *         debug: true
     *     };
     * });
     * @description Merges `values`
     * @param {...ConfigOptions} values
     * @returns {Config}
     */

  }, {
    key: 'merge',
    value: function merge() {
      var _ref2;

      for (var _len2 = arguments.length, values = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        values[_key2] = arguments[_key2];
      }

      return (_ref2 = new _ConfigCommandInvoker2.default(this.mergeCommand)).invoke.apply(_ref2, [this].concat(values));
    }

    /**
     * @example
     * import Config from 'webpack-config';
     *
     * export default new Config().extend('./test/fixtures/webpack.1.config.js');
     * @example
     * import Config from 'webpack-config';
     *
     * // Loads from `node_modules/react-redux/webpack.config.js`
     * export default new Config().extend('react-redux/webpack.config.js');
     * @example
     * import Config from 'webpack-config';
     *
     * // Loads from `node_modules/webpack-config-my/webpack.config.js`
     * export default new Config().extend('my/webpack.config.js');
     * @example
     * import Config from 'webpack-config';
     *
     * export default new Config().extend({
     *    './test/fixtures/webpack.1.config.js': config => {
     *        delete config.tags;
     *
     *        return config;
     *    }
     * });
     * @example
     * import Config from 'webpack-config';
     *
     * export default new Config().extend({
     *    './test/fixtures/webpack.1.config.js': [config => {
     *        delete config.tags;
     *
     *        return config;
     *    }, config => {
     *        delete config.profile;
     *
     *        return config;
     *    }]
     * });
     * @description Helps to extend config using local file or shareable config file which should be hosted under `node_modules`
     * @param {...ConfigExtendPossibleOptions} values
     * @returns {Config}
     */

  }, {
    key: 'extend',
    value: function extend() {
      var _ref3;

      for (var _len3 = arguments.length, values = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        values[_key3] = arguments[_key3];
      }

      return (_ref3 = new _ConfigCommandInvoker2.default(this.extendCommand)).invoke.apply(_ref3, [this].concat(values));
    }

    /**
     * @example
     * import Config from 'webpack-config';
     *
     * const config = new Config();
     *
     * config.merge({
     *   debug: true
     * });
     *
     * console.log(config.clone());
     * // Config { debug: true }
     * @description Creates copy of {@link Config}
     * @returns {Config}
     */

  }, {
    key: 'clone',
    value: function clone() {
      var config = new Config(this.factory, this.defaultsCommand, this.mergeCommand, this.extendCommand);

      config.dependencyTree = new _ConfigDependency2.default(config, this.dependencyTree.children);

      return config.merge(this.toObject());
    }

    /**
     * @example
     * import Config from 'webpack-config';
     *
     * const config = new Config();
     *
     * config.merge({
     *   debug: true
     * });
     *
     * console.log(config.toObject());
     * // Object { debug: true }
     * @description Returns plain `Object` representation of {@link Config}
     * @returns {Object}
     */

  }, {
    key: 'toObject',
    value: function toObject() {
      var properties = {};

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = (0, _getIterator3.default)((0, _entries2.default)(this)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _step$value = (0, _slicedToArray3.default)(_step.value, 2);

          var key = _step$value[0];
          var value = _step$value[1];

          if (this.has(key)) {
            properties[key] = value;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return properties;
    }

    /**
     * @example
     * import Config from 'webpack-config';
     *
     * const config = new Config();
     *
     * config.set('debug', true);
     *
     * console.log(config.toObject());
     * // Object { debug: true }
     * @description Sets `value` at `path`
     * @param {String} path
     * @param {*} value
     * @return {Config}
     */

  }, {
    key: 'set',
    value: function set(path, value) {
      (0, _lodash.set)(this, path, value);

      return this;
    }

    /**
     * @example
     * import Config from 'webpack-config';
     *
     * const config = new Config();
     *
     * config.set('debug', true);
     *
     * console.log(config.get('debug'));
     * // true
     * @description Gets `value` at `path`
     * @param {String} path
     * @return {*}
     */

  }, {
    key: 'get',
    value: function get(path) {
      return (0, _lodash.get)(this, path);
    }

    /**
     * @example
     * import Config from 'webpack-config';
     *
     * const config = new Config();
     *
     * config.set('debug', true).remove('debug');
     *
     * console.log(config.get('debug'));
     * // undefined
     * @description Removes `value` at `path`
     * @param {String} path
     * @return {Config}
     */

  }, {
    key: 'remove',
    value: function remove(path) {
      (0, _lodash.unset)(this, path);

      return this;
    }

    /**
     * @example
     * import Config from 'webpack-config';
     *
     * const config = new Config();
     *
     * config.set('debug', true);
     *
     * console.log(config.has('debug'));
     * // true
     * @description Checks if `value` exist at `path`
     * @param {String} path
     * @return {Boolean}
     */

  }, {
    key: 'has',
    value: function has(path) {
      return (0, _lodash.has)(this, path);
    }

    /**
     * @returns {Object}
     */

  }, {
    key: 'toJSON',
    value: function toJSON() {
      return this.toObject();
    }

    /**
     * Returns `webpack.config.js`
     * @readonly
     * @type {String}
     */

  }, {
    key: 'factory',
    get: function get() {
      return FACTORY.get(this);
    }

    /**
     * @readonly
     * @type {ConfigDefaultsCommand}
     */

  }, {
    key: 'defaultsCommand',
    get: function get() {
      return DEFAULTS_COMMAND.get(this);
    }

    /**
     * @readonly
     * @type {ConfigMergeCommand}
     */

  }, {
    key: 'mergeCommand',
    get: function get() {
      return MERGE_COMMAND.get(this);
    }

    /**
     * @readonly
     * @type {ConfigExtendCommand}
     */

  }, {
    key: 'extendCommand',
    get: function get() {
      return EXTEND_COMMAND.get(this);
    }

    /**
     * @example
     * import Config from 'webpack-config';
     *
     * const config = new Config();
     *
     * config.extend('./test/fixtures/webpack.1.config.js');
     *
     * for (const {node} of config.dependencyTree) {
     *   console.log(node.root.filename);
     * }
     * // ./test/fixtures/webpack.1.config.js
     * // ./test/fixtures/webpack.2.config.js
     * // ./test/fixtures/webpack.3.config.js
     * // ./test/fixtures/webpack.5.config.js
     * // ./test/fixtures/webpack.4.config.js
     * @description Holds information about [included]{@link Config#extend} configs
     * @readonly
     * @type {ConfigDependency}
     */

  }, {
    key: 'dependencyTree',
    get: function get() {
      if (!DEPENDENCY_TREE.has(this)) {
        DEPENDENCY_TREE.set(this, new _ConfigDependency2.default(this));
      }

      return DEPENDENCY_TREE.get(this);
    }

    /**
     * @private
     * @param {ConfigDependency} value
     */
    ,
    set: function set(value) {
      DEPENDENCY_TREE.set(this, value);
    }
  }], [{
    key: 'FILENAME',
    get: function get() {
      return 'webpack.config.js';
    }
  }]);
  return Config;
}();

exports.default = Config;
module.exports = exports['default'];
//# sourceMappingURL=Config.js.map