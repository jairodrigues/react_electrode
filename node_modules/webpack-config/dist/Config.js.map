{"version":3,"sources":["../src/Config.js"],"names":["DEPENDENCY_TREE","FACTORY","DEFAULTS_COMMAND","MERGE_COMMAND","EXTEND_COMMAND","Config","factory","defaultsCommand","mergeCommand","extendCommand","set","values","invoke","config","dependencyTree","children","merge","toObject","properties","key","value","has","path","get"],"mappings":"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","file":"Config.js","sourcesContent":["import {\n    set,\n    unset,\n    get,\n    has\n} from 'lodash';\nimport ConfigDependency from './ConfigDependency';\nimport ConfigCommandInvoker from './ConfigCommandInvoker';\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst DEPENDENCY_TREE = new WeakMap();\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst FACTORY = new WeakMap();\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst DEFAULTS_COMMAND = new WeakMap();\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst MERGE_COMMAND = new WeakMap();\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst EXTEND_COMMAND = new WeakMap();\n\n/**\n * @class\n */\nclass Config {\n    /**\n     * @constructor\n     * @param {ConfigFactory} factory\n     * @param {ConfigDefaultsCommand} defaultsCommand\n     * @param {ConfigMergeCommand} mergeCommand\n     * @param {ConfigExtendCommand} extendCommand\n     */\n    constructor(factory, defaultsCommand, mergeCommand, extendCommand) {\n        FACTORY.set(this, factory);\n        DEFAULTS_COMMAND.set(this, defaultsCommand);\n        MERGE_COMMAND.set(this, mergeCommand);\n        EXTEND_COMMAND.set(this, extendCommand);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigFactory}\n     */\n    get factory() {\n        return FACTORY.get(this);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigDefaultsCommand}\n     */\n    get defaultsCommand() {\n        return DEFAULTS_COMMAND.get(this);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigMergeCommand}\n     */\n    get mergeCommand() {\n        return MERGE_COMMAND.get(this);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigExtendCommand}\n     */\n    get extendCommand() {\n        return EXTEND_COMMAND.get(this);\n    }\n\n    /**\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * const config = new Config();\n     *\n     * config.extend('./test/fixtures/webpack.1.config.js');\n     *\n     * for (const {node} of config.dependencyTree) {\n     *   console.log(node.root.filename);\n     * }\n     * // ./test/fixtures/webpack.1.config.js\n     * // ./test/fixtures/webpack.2.config.js\n     * // ./test/fixtures/webpack.3.config.js\n     * // ./test/fixtures/webpack.5.config.js\n     * // ./test/fixtures/webpack.4.config.js\n     * @description Holds information about [included]{@link Config#extend} configs\n     * @readonly\n     * @type {ConfigDependency}\n     */\n    get dependencyTree() {\n        if (!DEPENDENCY_TREE.has(this)) {\n            DEPENDENCY_TREE.set(this, new ConfigDependency(this));\n        }\n\n        return DEPENDENCY_TREE.get(this);\n    }\n\n    /**\n     * @private\n     * @param {ConfigDependency} value\n     */\n    set dependencyTree(value) {\n        DEPENDENCY_TREE.set(this, value);\n    }\n\n    /**\n     * import Config from 'webpack-config';\n     *\n     * export default new Config().defaults({\n     *    debug: true\n     * }, {\n     *    profile: false\n     * });\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * export default new Config().defaults(() => {\n     *     return {\n     *         debug: true\n     *     };\n     * });\n     * @description Adds `values` if they are missing\n     * @param {...ConfigOptions} values\n     * @returns {Config}\n     */\n    defaults(...values) {\n        return new ConfigCommandInvoker(this.defaultsCommand).invoke(this, ...values);\n    }\n\n    /**\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * export default new Config().merge({\n     *    debug: true\n     * }, {\n     *    profile: false\n     * });\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * export default new Config().merge(() => {\n     *     return {\n     *         debug: true\n     *     };\n     * });\n     * @description Merges `values`\n     * @param {...ConfigOptions} values\n     * @returns {Config}\n     */\n    merge(...values) {\n        return new ConfigCommandInvoker(this.mergeCommand).invoke(this, ...values);\n    }\n\n    /**\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * export default new Config().extend('./test/fixtures/webpack.1.config.js');\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * // Loads from `node_modules/react-redux/webpack.config.js`\n     * export default new Config().extend('react-redux/webpack.config.js');\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * // Loads from `node_modules/webpack-config-my/webpack.config.js`\n     * export default new Config().extend('my/webpack.config.js');\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * export default new Config().extend({\n     *    './test/fixtures/webpack.1.config.js': config => {\n     *        delete config.tags;\n     *\n     *        return config;\n     *    }\n     * });\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * export default new Config().extend({\n     *    './test/fixtures/webpack.1.config.js': [config => {\n     *        delete config.tags;\n     *\n     *        return config;\n     *    }, config => {\n     *        delete config.profile;\n     *\n     *        return config;\n     *    }]\n     * });\n     * @description Helps to extend config using local file or shareable config file which should be hosted under `node_modules`\n     * @param {...ConfigExtendPossibleOptions} values\n     * @returns {Config}\n     */\n    extend(...values) {\n        return new ConfigCommandInvoker(this.extendCommand).invoke(this, ...values);\n    }\n\n    /**\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * const config = new Config();\n     *\n     * config.merge({\n     *   debug: true\n     * });\n     *\n     * console.log(config.clone());\n     * // Config { debug: true }\n     * @description Creates copy of {@link Config}\n     * @returns {Config}\n     */\n    clone() {\n        const config = new Config(this.factory, this.defaultsCommand, this.mergeCommand, this.extendCommand);\n\n        config.dependencyTree = new ConfigDependency(config, this.dependencyTree.children);\n\n        return config.merge(this.toObject());\n    }\n\n    /**\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * const config = new Config();\n     *\n     * config.merge({\n     *   debug: true\n     * });\n     *\n     * console.log(config.toObject());\n     * // Object { debug: true }\n     * @description Returns plain `Object` representation of {@link Config}\n     * @returns {Object}\n     */\n    toObject() {\n        const properties = {};\n\n        for (const [key, value] of Object.entries(this)) {\n            if (this.has(key)) {\n                properties[key] = value;\n            }\n        }\n\n        return properties;\n    }\n\n    /**\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * const config = new Config();\n     *\n     * config.set('debug', true);\n     *\n     * console.log(config.toObject());\n     * // Object { debug: true }\n     * @description Sets `value` at `path`\n     * @param {String} path\n     * @param {*} value\n     * @return {Config}\n     */\n    set(path, value) {\n        set(this, path, value);\n\n        return this;\n    }\n\n    /**\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * const config = new Config();\n     *\n     * config.set('debug', true);\n     *\n     * console.log(config.get('debug'));\n     * // true\n     * @description Gets `value` at `path`\n     * @param {String} path\n     * @return {*}\n     */\n    get(path) {\n        return get(this, path);\n    }\n\n    /**\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * const config = new Config();\n     *\n     * config.set('debug', true).remove('debug');\n     *\n     * console.log(config.get('debug'));\n     * // undefined\n     * @description Removes `value` at `path`\n     * @param {String} path\n     * @return {Config}\n     */\n    remove(path) {\n        unset(this, path);\n\n        return this;\n    }\n\n    /**\n     * @example\n     * import Config from 'webpack-config';\n     *\n     * const config = new Config();\n     *\n     * config.set('debug', true);\n     *\n     * console.log(config.has('debug'));\n     * // true\n     * @description Checks if `value` exist at `path`\n     * @param {String} path\n     * @return {Boolean}\n     */\n    has(path) {\n        return has(this, path);\n    }\n\n    /**\n     * @returns {Object}\n     */\n    toJSON() {\n        return this.toObject();\n    }\n\n    /**\n     * Returns `webpack.config.js`\n     * @readonly\n     * @type {String}\n     */\n    static get FILENAME() {\n        return 'webpack.config.js';\n    }\n}\n\nexport default Config;\n"]}