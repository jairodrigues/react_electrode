{"version":3,"sources":["../src/ConfigBuilder.js"],"names":["CONFIG","PENDING_CONFIG","FACTORY","applyHook","path","hook","current","previous","ConfigBuilder","factory","set","map","has","createConfig","get","value","pendingConfig","merge","defaults","extend","hooks","Array","isArray","config","forEach","x","clone","toObject","delete","getOrSetConfig"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAIA;;;;AAIA,IAAMA,SAAS,uBAAf;;AAEA;;;;AAIA,IAAMC,iBAAiB,uBAAvB;;AAEA;;;;AAIA,IAAMC,UAAU,uBAAhB;;AAEA;;;;;;;;AAQA,IAAMC,YAAY,SAAZA,SAAY,CAACC,IAAD,EAAOC,IAAP,EAAaC,OAAb,EAAsBC,QAAtB;AAAA,WAAmC,wBAAWF,IAAX,IAAmBA,KAAKD,IAAL,EAAWE,OAAX,EAAoBC,QAApB,CAAnB,GAAmDF,IAAtF;AAAA,CAAlB;;AAEA;;;;IAGMG,a;AACF;;;;AAIA,2BAAYC,OAAZ,EAAqB;AAAA;;AACjBP,gBAAQQ,GAAR,CAAY,IAAZ,EAAkBD,OAAlB;AACH;;AAED;;;;;;;;;;AAyBA;;;;;uCAKeE,G,EAAK;AAChB,gBAAI,CAACA,IAAIC,GAAJ,CAAQ,IAAR,CAAL,EAAoB;AAChBD,oBAAID,GAAJ,CAAQ,IAAR,EAAc,KAAKD,OAAL,CAAaI,YAAb,CAA0B,EAA1B,CAAd;AACH;;AAED,mBAAOF,IAAIG,GAAJ,CAAQ,IAAR,CAAP;AACH;;AAED;;;;;;;+BAIOC,K,EAAO;AACVf,mBAAOU,GAAP,CAAW,IAAX,EAAiB,KAAKD,OAAL,CAAaI,YAAb,CAA0BE,KAA1B,CAAjB;;AAEA,mBAAO,IAAP;AACH;;AAED;;;;;;;;gCAKiB;AAAA;;AACb,mCAAKC,aAAL,EAAmBC,KAAnB;;AAEA,mBAAO,IAAP;AACH;;AAED;;;;;;;;mCAKoB;AAAA;;AAChB,oCAAKD,aAAL,EAAmBE,QAAnB;;AAEA,mBAAO,IAAP;AACH;;AAED;;;;;;;;iCAKkB;AAAA;;AACd,oCAAKF,aAAL,EAAmBG,MAAnB;;AAEA,mBAAO,IAAP;AACH;;AAED;;;;;;;qCAIuB;AAAA;;AAAA,gBAAZC,KAAY,uEAAJ,EAAI;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,wBACPhB,IADO;AAAA,wBACDC,IADC;;AAEf,wBAAIgB,MAAMC,OAAN,CAAc,MAAKC,MAAnB,CAAJ,EAAgC;AAC5B,8BAAKA,MAAL,CAAYC,OAAZ,CAAoB,kBAAU;AAC1B,gCAAID,OAAOX,GAAP,CAAWR,IAAX,CAAJ,EAAsB;AAClB,oCAAMW,QAAQZ,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB,MAAKW,aAA3B,EAA0CO,MAA1C,CAAd;;AAEA,sCAAKP,aAAL,CAAmBN,GAAnB,CAAuBN,IAAvB,EAA6BW,KAA7B;AACH;AACJ,yBAND;AAOH,qBARD,MAQO;AACH,4BAAI,MAAKC,aAAL,CAAmBJ,GAAnB,CAAuBR,IAAvB,CAAJ,EAAkC;AAC9B,gCAAMW,QAAQZ,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB,MAAKW,aAA3B,EAA0C,MAAKO,MAA/C,CAAd;;AAEA,kCAAKP,aAAL,CAAmBN,GAAnB,CAAuBN,IAAvB,EAA6BW,KAA7B;AACH;AACJ;AAhBc;;AACnB,gEAA2B,uBAAeK,KAAf,CAA3B,4GAAkD;AAAA;AAgBjD;AAjBkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBnB,mBAAO,IAAP;AACH;;AAED;;;;;;gCAGQ;AAAA;;AACJ,gBAAIL,cAAJ;;AAEA,gBAAIM,MAAMC,OAAN,CAAc,KAAKC,MAAnB,CAAJ,EAAgC;AAC5BR,wBAAQ,KAAKQ,MAAL,CAAYZ,GAAZ,CAAgB;AAAA,2BAAKc,EAAEC,KAAF,GAAUT,KAAV,CAAgB,OAAKD,aAArB,EAAoCW,QAApC,EAAL;AAAA,iBAAhB,CAAR;AACH,aAFD,MAEO;AACHZ,wBAAQ,KAAKQ,MAAL,CAAYG,KAAZ,GAAoBT,KAApB,CAA0B,KAAKD,aAA/B,EAA8CW,QAA9C,EAAR;AACH;;AAED,gBAAMJ,SAAS,KAAKd,OAAL,CAAaI,YAAb,CAA0BE,KAA1B,CAAf;;AAEAd,2BAAe2B,MAAf,CAAsB,IAAtB;AACA5B,mBAAOU,GAAP,CAAW,IAAX,EAAiBa,MAAjB;;AAEA,mBAAOA,MAAP;AACH;;;4BAzHa;AACV,mBAAOrB,QAAQY,GAAR,CAAY,IAAZ,CAAP;AACH;;AAED;;;;;;;;4BAKa;AACT,mBAAO,KAAKe,cAAL,CAAoB7B,MAApB,CAAP;AACH;;AAED;;;;;;;4BAIoB;AAChB,mBAAO,KAAK6B,cAAL,CAAoB5B,cAApB,CAAP;AACH;;;;;kBAyGUO,a","file":"ConfigBuilder.js","sourcesContent":["import {\n    isFunction\n} from 'lodash';\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst CONFIG = new WeakMap();\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst PENDING_CONFIG = new WeakMap();\n\n/**\n * @private\n * @type {WeakMap}\n */\nconst FACTORY = new WeakMap();\n\n/**\n * @private\n * @param {String} path\n * @param {*|Function} hook\n * @param {Config} current\n * @param {Config} previous\n * @returns {*}\n */\nconst applyHook = (path, hook, current, previous) => isFunction(hook) ? hook(path, current, previous) : hook;\n\n/**\n * @class\n */\nclass ConfigBuilder {\n    /**\n     * @constructor\n     * @param {ConfigFactory} factory\n     */\n    constructor(factory) {\n        FACTORY.set(this, factory);\n    }\n\n    /**\n     * @readonly\n     * @type {ConfigFactory}\n     */\n    get factory() {\n        return FACTORY.get(this);\n    }\n\n    /**\n     * @private\n     * @readonly\n     * @type {Config|ConfigList}\n     */\n    get config() {\n        return this.getOrSetConfig(CONFIG);\n    }\n\n    /**\n     * @readonly\n     * @type {Config}\n     */\n    get pendingConfig() {\n        return this.getOrSetConfig(PENDING_CONFIG);\n    }\n\n    /**\n     * @private\n     * @param {WeakMap} map\n     * @returns {Config}\n     */\n    getOrSetConfig(map) {\n        if (!map.has(this)) {\n            map.set(this, this.factory.createConfig({}));\n        }\n\n        return map.get(this);\n    }\n\n    /**\n     * @param {Function|Object|Object[]} value\n     * @returns {ConfigBuilder}\n     */\n    copyOf(value) {\n        CONFIG.set(this, this.factory.createConfig(value));\n\n        return this;\n    }\n\n    /**\n     * @see {@link Config#merge}\n     * @param {...ConfigOptions} values\n     * @returns {ConfigBuilder}\n     */\n    merge(...values) {\n        this.pendingConfig.merge(...values);\n\n        return this;\n    }\n\n    /**\n     * @see {@link Config#defaults}\n     * @param {...ConfigOptions} values\n     * @returns {ConfigBuilder}\n     */\n    defaults(...values) {\n        this.pendingConfig.defaults(...values);\n\n        return this;\n    }\n\n    /**\n     * @see {@link Config#extend}\n     * @param {...ConfigExtendOptions} values\n     * @returns {ConfigBuilder}\n     */\n    extend(...values) {\n        this.pendingConfig.extend(...values);\n\n        return this;\n    }\n\n    /**\n     * @param {Object<String,Function>} [hooks]\n     * @returns {ConfigBuilder}\n     */\n    applyHooks(hooks = {}) {\n        for (const [path, hook] of Object.entries(hooks)) {\n            if (Array.isArray(this.config)) {\n                this.config.forEach(config => {\n                    if (config.has(path)) {\n                        const value = applyHook(path, hook, this.pendingConfig, config);\n\n                        this.pendingConfig.set(path, value);\n                    }\n                });\n            } else {\n                if (this.pendingConfig.has(path)) {\n                    const value = applyHook(path, hook, this.pendingConfig, this.config);\n\n                    this.pendingConfig.set(path, value);\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * @returns {Config|ConfigList}\n     */\n    build() {\n        let value;\n\n        if (Array.isArray(this.config)) {\n            value = this.config.map(x => x.clone().merge(this.pendingConfig).toObject());\n        } else {\n            value = this.config.clone().merge(this.pendingConfig).toObject();\n        }\n\n        const config = this.factory.createConfig(value);\n\n        PENDING_CONFIG.delete(this);\n        CONFIG.set(this, config);\n\n        return config;\n    }\n}\n\nexport default ConfigBuilder;\n"]}